/*
 * Swagger Petstore - OpenAPI 3.0
 *
 * This is a example for performance study based on the OpenAPI 3.0 specification.
 *
 * API version: 1.0.11
 * Contact: skalicky.martin@iotdomu.cz
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package clients

import (
	"context"
	"microservices-no-db/modules/invoice/database"

	"github.com/antihax/optional"
)

type InvoiceApi interface {
	GetInvoiceByInvoiceId(ctx context.Context, invoiceId string) (*database.Invoice, error)
	CreateInvoice(ctx context.Context, orderId int64, price float64) (*database.Invoice, error)
	UpdateInvoice(ctx context.Context, invoice *database.Invoice) (*database.Invoice, error)
}

type InvoiceApiService service

/*
  InvoiceApiService Generate invoice for order
   * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
   * @param optional nil or *InvoiceApiCreateInvoiceOpts - Optional Parameters:
	   * @param "Body" (optional.Interface of Order) -
  @return []Invoice
*/

type InvoiceApiCreateInvoiceOpts struct {
	Body optional.Interface
}

type OrderRequest struct {
	Price float64 `json:"price"`
	Id    int64   `json:"id"`
}

func (a *InvoiceApiService) CreateInvoice(ctx context.Context, orderId int64, price float64) (*database.Invoice, error) {
	url := a.client.cfg.BasePath + "/invoice"

	var invoice = new(database.Invoice)
	var body = &OrderRequest{
		Id:    orderId,
		Price: price,
	}

	var _, err = a.client.doCallHttp(ctx, url, "Post", body, invoice)
	if err != nil {
		return nil, err
	}

	return invoice, nil
}

func (a *InvoiceApiService) GetInvoiceByInvoiceId(ctx context.Context, invoiceId string) (*database.Invoice, error) {
	url := a.client.cfg.BasePath + "/invoice/" + invoiceId

	var invoice = new(database.Invoice)

	var _, err = a.client.doCallHttp(ctx, url, "Get", nil, invoice)
	if err != nil {
		return nil, err
	}

	return invoice, nil
}

func (a *InvoiceApiService) UpdateInvoice(ctx context.Context, invoice *database.Invoice) (*database.Invoice, error) {
	url := a.client.cfg.BasePath + "/invoice/" + invoice.InvoiceId.String()

	var updatedInvoice = new(database.Invoice)

	var _, err = a.client.doCallHttp(ctx, url, "Patch", invoice, updatedInvoice)
	if err != nil {
		return nil, err
	}

	return updatedInvoice, nil
}
